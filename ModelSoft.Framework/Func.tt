<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="Common.ttinclude" #>
namespace <#= Namespace #>
{
    using global::System;

<#for(int tupleSize = minTupleSize; tupleSize <= maxTupleSize; tupleSize++) {#>
<#
string types = GetInTypesString(tupleSize);
string arguments = GetArgumentsString(tupleSize);
#>
    /// <summary>
    /// Encapsulates a method that has <#= tupleSize #> parameters and returns a value of the type specified by the TResult parameter.
    /// </summary>
<#for(int i = 1; i <= tupleSize; i++ ){#>
    /// <typeparam name="T<#=i#>">The type of the <#= i #>th parameter of the method that this delegate encapsulates.</typeparam>
<#}#>
    /// <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
<#for(int i = 1; i <= tupleSize; i++ ){#>
    /// <param name="item<#= i #>">The <#= i #>th parameter of the method that this delegate encapsulates.</param>
<#}#>
    /// <returns>The return value of the method that this delegate encapsulates.</returns>
    public delegate TResult <#= FuncName #><<#=types#>, out TResult>(<#=arguments#>);
<#}#>

    public static class FuncExtensions
    {
        public static TResult EvalOr<TResult>(this <#= FuncName #><TResult> func, TResult defaultValue = default(TResult))
        {
            return func.EvalOr(() => defaultValue);
        }
        public static TResult EvalOr<TResult>(this <#= FuncName #><TResult> func, <#= FuncName #><TResult> otherwiseFunc)
        {
            if (func == null)
                if (otherwiseFunc == null)
                    return default(TResult);
                else
                    return otherwiseFunc(); 
            return func();
        }
<#for(int tupleSize = 1; tupleSize <= maxTupleSize; tupleSize++) {#>
<#
string types = GetTypesString(tupleSize);
string arguments = GetArgumentsString(tupleSize);
string variables = GetVariablesString(tupleSize);
#>

        public static TResult EvalOr<<#=types#>, TResult>(this <#= FuncName #><<#=types#>, TResult> func, <#= arguments #>, TResult defaultValue = default(TResult))
        {
            return func.EvalOr(<#= variables #>, delegate { return defaultValue; });
        }
        public static TResult EvalOr<<#=types#>, TResult>(this <#= FuncName #><<#=types#>, TResult> func, <#= arguments #>, <#= FuncName #><<#=types#>, TResult> otherwiseFunc)
        {
            if (func == null)
                if (otherwiseFunc == null)
                    return default(TResult);
                else
                    return otherwiseFunc(<#= variables #>); 
            return func(<#= variables #>);
        }
<#}#>
    }
}

<#+
const string Namespace = "ModelSoft.Framework";
const string FuncName = "Func";
const int minTupleSize = 9; 
const int maxTupleSize = 20;
private string GetTypesString(int tupleSize)
{
  return ToStringList(System.Linq.Enumerable.Range(1, tupleSize), ", ", i => string.Format("T{0}", i));
}
private string GetInTypesString(int tupleSize)
{
  return ToStringList(System.Linq.Enumerable.Range(1, tupleSize), ", ", i => string.Format("in T{0}", i));
}
private string GetArgumentsString(int tupleSize)
{
  return ToStringList(System.Linq.Enumerable.Range(1, tupleSize), ", ", i => string.Format("T{0} item{0}", i));
}
private string GetVariablesString(int tupleSize)
{
  return ToStringList(System.Linq.Enumerable.Range(1, tupleSize), ", ", i => string.Format("item{0}", i));
}
private string GetPropertiesString(int tupleSize)
{
  return ToStringList(System.Linq.Enumerable.Range(1, tupleSize), ", ", i => string.Format("Item{0}", i));
}
#>
